# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class DetectionDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raw_data': 'dict(str, list[object])',
        'timestamp': 'list[int]',
        'upper_bound': 'list[float]',
        'lower_bound': 'list[float]',
        'current': 'list[float]',
        'expected': 'list[float]'
    }

    attribute_map = {
        'raw_data': 'rawData',
        'timestamp': 'timestamp',
        'upper_bound': 'upperBound',
        'lower_bound': 'lowerBound',
        'current': 'current',
        'expected': 'expected'
    }

    def __init__(self, raw_data=None, timestamp=None, upper_bound=None, lower_bound=None, current=None, expected=None, _configuration=None):  # noqa: E501
        """DetectionDataApi - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._raw_data = None
        self._timestamp = None
        self._upper_bound = None
        self._lower_bound = None
        self._current = None
        self._expected = None
        self.discriminator = None

        if raw_data is not None:
            self.raw_data = raw_data
        if timestamp is not None:
            self.timestamp = timestamp
        if upper_bound is not None:
            self.upper_bound = upper_bound
        if lower_bound is not None:
            self.lower_bound = lower_bound
        if current is not None:
            self.current = current
        if expected is not None:
            self.expected = expected

    @property
    def raw_data(self):
        """Gets the raw_data of this DetectionDataApi.  # noqa: E501


        :return: The raw_data of this DetectionDataApi.  # noqa: E501
        :rtype: dict(str, list[object])
        """
        return self._raw_data

    @raw_data.setter
    def raw_data(self, raw_data):
        """Sets the raw_data of this DetectionDataApi.


        :param raw_data: The raw_data of this DetectionDataApi.  # noqa: E501
        :type: dict(str, list[object])
        """

        self._raw_data = raw_data

    @property
    def timestamp(self):
        """Gets the timestamp of this DetectionDataApi.  # noqa: E501


        :return: The timestamp of this DetectionDataApi.  # noqa: E501
        :rtype: list[int]
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DetectionDataApi.


        :param timestamp: The timestamp of this DetectionDataApi.  # noqa: E501
        :type: list[int]
        """

        self._timestamp = timestamp

    @property
    def upper_bound(self):
        """Gets the upper_bound of this DetectionDataApi.  # noqa: E501


        :return: The upper_bound of this DetectionDataApi.  # noqa: E501
        :rtype: list[float]
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this DetectionDataApi.


        :param upper_bound: The upper_bound of this DetectionDataApi.  # noqa: E501
        :type: list[float]
        """

        self._upper_bound = upper_bound

    @property
    def lower_bound(self):
        """Gets the lower_bound of this DetectionDataApi.  # noqa: E501


        :return: The lower_bound of this DetectionDataApi.  # noqa: E501
        :rtype: list[float]
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this DetectionDataApi.


        :param lower_bound: The lower_bound of this DetectionDataApi.  # noqa: E501
        :type: list[float]
        """

        self._lower_bound = lower_bound

    @property
    def current(self):
        """Gets the current of this DetectionDataApi.  # noqa: E501


        :return: The current of this DetectionDataApi.  # noqa: E501
        :rtype: list[float]
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this DetectionDataApi.


        :param current: The current of this DetectionDataApi.  # noqa: E501
        :type: list[float]
        """

        self._current = current

    @property
    def expected(self):
        """Gets the expected of this DetectionDataApi.  # noqa: E501


        :return: The expected of this DetectionDataApi.  # noqa: E501
        :rtype: list[float]
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this DetectionDataApi.


        :param expected: The expected of this DetectionDataApi.  # noqa: E501
        :type: list[float]
        """

        self._expected = expected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetectionDataApi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectionDataApi):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetectionDataApi):
            return True

        return self.to_dict() != other.to_dict()
