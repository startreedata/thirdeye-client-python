# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class AlertEvaluationApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert': 'AlertApiModel',
        'detection_evaluations': 'dict(str, DetectionEvaluationApiModel)',
        'evaluations': 'dict(str, dict(str, DetectionEvaluationApiModel))',
        'start': 'datetime',
        'end': 'datetime',
        'evaluation_context': 'EvaluationContextApiModel',
        'last_timestamp': 'datetime',
        'dry_run': 'bool'
    }

    attribute_map = {
        'alert': 'alert',
        'detection_evaluations': 'detectionEvaluations',
        'evaluations': 'evaluations',
        'start': 'start',
        'end': 'end',
        'evaluation_context': 'evaluationContext',
        'last_timestamp': 'lastTimestamp',
        'dry_run': 'dryRun'
    }

    def __init__(self, alert=None, detection_evaluations=None, evaluations=None, start=None, end=None, evaluation_context=None, last_timestamp=None, dry_run=None, _configuration=None):  # noqa: E501
        """AlertEvaluationApiModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alert = None
        self._detection_evaluations = None
        self._evaluations = None
        self._start = None
        self._end = None
        self._evaluation_context = None
        self._last_timestamp = None
        self._dry_run = None
        self.discriminator = None

        if alert is not None:
            self.alert = alert
        if detection_evaluations is not None:
            self.detection_evaluations = detection_evaluations
        if evaluations is not None:
            self.evaluations = evaluations
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if evaluation_context is not None:
            self.evaluation_context = evaluation_context
        if last_timestamp is not None:
            self.last_timestamp = last_timestamp
        if dry_run is not None:
            self.dry_run = dry_run

    @property
    def alert(self):
        """Gets the alert of this AlertEvaluationApiModel.  # noqa: E501


        :return: The alert of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: AlertApiModel
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this AlertEvaluationApiModel.


        :param alert: The alert of this AlertEvaluationApiModel.  # noqa: E501
        :type: AlertApiModel
        """

        self._alert = alert

    @property
    def detection_evaluations(self):
        """Gets the detection_evaluations of this AlertEvaluationApiModel.  # noqa: E501


        :return: The detection_evaluations of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: dict(str, DetectionEvaluationApiModel)
        """
        return self._detection_evaluations

    @detection_evaluations.setter
    def detection_evaluations(self, detection_evaluations):
        """Sets the detection_evaluations of this AlertEvaluationApiModel.


        :param detection_evaluations: The detection_evaluations of this AlertEvaluationApiModel.  # noqa: E501
        :type: dict(str, DetectionEvaluationApiModel)
        """

        self._detection_evaluations = detection_evaluations

    @property
    def evaluations(self):
        """Gets the evaluations of this AlertEvaluationApiModel.  # noqa: E501


        :return: The evaluations of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: dict(str, dict(str, DetectionEvaluationApiModel))
        """
        return self._evaluations

    @evaluations.setter
    def evaluations(self, evaluations):
        """Sets the evaluations of this AlertEvaluationApiModel.


        :param evaluations: The evaluations of this AlertEvaluationApiModel.  # noqa: E501
        :type: dict(str, dict(str, DetectionEvaluationApiModel))
        """

        self._evaluations = evaluations

    @property
    def start(self):
        """Gets the start of this AlertEvaluationApiModel.  # noqa: E501


        :return: The start of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this AlertEvaluationApiModel.


        :param start: The start of this AlertEvaluationApiModel.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this AlertEvaluationApiModel.  # noqa: E501


        :return: The end of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this AlertEvaluationApiModel.


        :param end: The end of this AlertEvaluationApiModel.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def evaluation_context(self):
        """Gets the evaluation_context of this AlertEvaluationApiModel.  # noqa: E501


        :return: The evaluation_context of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: EvaluationContextApiModel
        """
        return self._evaluation_context

    @evaluation_context.setter
    def evaluation_context(self, evaluation_context):
        """Sets the evaluation_context of this AlertEvaluationApiModel.


        :param evaluation_context: The evaluation_context of this AlertEvaluationApiModel.  # noqa: E501
        :type: EvaluationContextApiModel
        """

        self._evaluation_context = evaluation_context

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this AlertEvaluationApiModel.  # noqa: E501


        :return: The last_timestamp of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this AlertEvaluationApiModel.


        :param last_timestamp: The last_timestamp of this AlertEvaluationApiModel.  # noqa: E501
        :type: datetime
        """

        self._last_timestamp = last_timestamp

    @property
    def dry_run(self):
        """Gets the dry_run of this AlertEvaluationApiModel.  # noqa: E501


        :return: The dry_run of this AlertEvaluationApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this AlertEvaluationApiModel.


        :param dry_run: The dry_run of this AlertEvaluationApiModel.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertEvaluationApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertEvaluationApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertEvaluationApiModel):
            return True

        return self.to_dict() != other.to_dict()
