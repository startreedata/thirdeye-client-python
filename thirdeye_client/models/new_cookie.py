# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class NewCookie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'value': 'str',
        'version': 'int',
        'path': 'str',
        'domain': 'str',
        'comment': 'str',
        'max_age': 'int',
        'expiry': 'datetime',
        'secure': 'bool',
        'http_only': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'value': 'value',
        'version': 'version',
        'path': 'path',
        'domain': 'domain',
        'comment': 'comment',
        'max_age': 'maxAge',
        'expiry': 'expiry',
        'secure': 'secure',
        'http_only': 'httpOnly'
    }

    def __init__(self, name=None, value=None, version=None, path=None, domain=None, comment=None, max_age=None, expiry=None, secure=None, http_only=None, _configuration=None):  # noqa: E501
        """NewCookie - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._value = None
        self._version = None
        self._path = None
        self._domain = None
        self._comment = None
        self._max_age = None
        self._expiry = None
        self._secure = None
        self._http_only = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value is not None:
            self.value = value
        if version is not None:
            self.version = version
        if path is not None:
            self.path = path
        if domain is not None:
            self.domain = domain
        if comment is not None:
            self.comment = comment
        if max_age is not None:
            self.max_age = max_age
        if expiry is not None:
            self.expiry = expiry
        if secure is not None:
            self.secure = secure
        if http_only is not None:
            self.http_only = http_only

    @property
    def name(self):
        """Gets the name of this NewCookie.  # noqa: E501


        :return: The name of this NewCookie.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewCookie.


        :param name: The name of this NewCookie.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this NewCookie.  # noqa: E501


        :return: The value of this NewCookie.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this NewCookie.


        :param value: The value of this NewCookie.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def version(self):
        """Gets the version of this NewCookie.  # noqa: E501


        :return: The version of this NewCookie.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NewCookie.


        :param version: The version of this NewCookie.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def path(self):
        """Gets the path of this NewCookie.  # noqa: E501


        :return: The path of this NewCookie.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this NewCookie.


        :param path: The path of this NewCookie.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def domain(self):
        """Gets the domain of this NewCookie.  # noqa: E501


        :return: The domain of this NewCookie.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this NewCookie.


        :param domain: The domain of this NewCookie.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def comment(self):
        """Gets the comment of this NewCookie.  # noqa: E501


        :return: The comment of this NewCookie.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this NewCookie.


        :param comment: The comment of this NewCookie.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def max_age(self):
        """Gets the max_age of this NewCookie.  # noqa: E501


        :return: The max_age of this NewCookie.  # noqa: E501
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this NewCookie.


        :param max_age: The max_age of this NewCookie.  # noqa: E501
        :type: int
        """

        self._max_age = max_age

    @property
    def expiry(self):
        """Gets the expiry of this NewCookie.  # noqa: E501


        :return: The expiry of this NewCookie.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this NewCookie.


        :param expiry: The expiry of this NewCookie.  # noqa: E501
        :type: datetime
        """

        self._expiry = expiry

    @property
    def secure(self):
        """Gets the secure of this NewCookie.  # noqa: E501


        :return: The secure of this NewCookie.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this NewCookie.


        :param secure: The secure of this NewCookie.  # noqa: E501
        :type: bool
        """

        self._secure = secure

    @property
    def http_only(self):
        """Gets the http_only of this NewCookie.  # noqa: E501


        :return: The http_only of this NewCookie.  # noqa: E501
        :rtype: bool
        """
        return self._http_only

    @http_only.setter
    def http_only(self, http_only):
        """Sets the http_only of this NewCookie.


        :param http_only: The http_only of this NewCookie.  # noqa: E501
        :type: bool
        """

        self._http_only = http_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewCookie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewCookie):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewCookie):
            return True

        return self.to_dict() != other.to_dict()
