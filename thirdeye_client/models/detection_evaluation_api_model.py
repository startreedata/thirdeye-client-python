# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class DetectionEvaluationApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idx': 'int',
        'mape': 'float',
        'data': 'DetectionDataApiModel',
        'anomalies': 'list[AnomalyApiModel]',
        'enumeration_item': 'EnumerationItemApiModel'
    }

    attribute_map = {
        'idx': 'idx',
        'mape': 'mape',
        'data': 'data',
        'anomalies': 'anomalies',
        'enumeration_item': 'enumerationItem'
    }

    def __init__(self, idx=None, mape=None, data=None, anomalies=None, enumeration_item=None, _configuration=None):  # noqa: E501
        """DetectionEvaluationApiModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._idx = None
        self._mape = None
        self._data = None
        self._anomalies = None
        self._enumeration_item = None
        self.discriminator = None

        if idx is not None:
            self.idx = idx
        if mape is not None:
            self.mape = mape
        if data is not None:
            self.data = data
        if anomalies is not None:
            self.anomalies = anomalies
        if enumeration_item is not None:
            self.enumeration_item = enumeration_item

    @property
    def idx(self):
        """Gets the idx of this DetectionEvaluationApiModel.  # noqa: E501


        :return: The idx of this DetectionEvaluationApiModel.  # noqa: E501
        :rtype: int
        """
        return self._idx

    @idx.setter
    def idx(self, idx):
        """Sets the idx of this DetectionEvaluationApiModel.


        :param idx: The idx of this DetectionEvaluationApiModel.  # noqa: E501
        :type: int
        """

        self._idx = idx

    @property
    def mape(self):
        """Gets the mape of this DetectionEvaluationApiModel.  # noqa: E501


        :return: The mape of this DetectionEvaluationApiModel.  # noqa: E501
        :rtype: float
        """
        return self._mape

    @mape.setter
    def mape(self, mape):
        """Sets the mape of this DetectionEvaluationApiModel.


        :param mape: The mape of this DetectionEvaluationApiModel.  # noqa: E501
        :type: float
        """

        self._mape = mape

    @property
    def data(self):
        """Gets the data of this DetectionEvaluationApiModel.  # noqa: E501


        :return: The data of this DetectionEvaluationApiModel.  # noqa: E501
        :rtype: DetectionDataApiModel
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DetectionEvaluationApiModel.


        :param data: The data of this DetectionEvaluationApiModel.  # noqa: E501
        :type: DetectionDataApiModel
        """

        self._data = data

    @property
    def anomalies(self):
        """Gets the anomalies of this DetectionEvaluationApiModel.  # noqa: E501


        :return: The anomalies of this DetectionEvaluationApiModel.  # noqa: E501
        :rtype: list[AnomalyApiModel]
        """
        return self._anomalies

    @anomalies.setter
    def anomalies(self, anomalies):
        """Sets the anomalies of this DetectionEvaluationApiModel.


        :param anomalies: The anomalies of this DetectionEvaluationApiModel.  # noqa: E501
        :type: list[AnomalyApiModel]
        """

        self._anomalies = anomalies

    @property
    def enumeration_item(self):
        """Gets the enumeration_item of this DetectionEvaluationApiModel.  # noqa: E501


        :return: The enumeration_item of this DetectionEvaluationApiModel.  # noqa: E501
        :rtype: EnumerationItemApiModel
        """
        return self._enumeration_item

    @enumeration_item.setter
    def enumeration_item(self, enumeration_item):
        """Sets the enumeration_item of this DetectionEvaluationApiModel.


        :param enumeration_item: The enumeration_item of this DetectionEvaluationApiModel.  # noqa: E501
        :type: EnumerationItemApiModel
        """

        self._enumeration_item = enumeration_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetectionEvaluationApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectionEvaluationApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetectionEvaluationApiModel):
            return True

        return self.to_dict() != other.to_dict()
