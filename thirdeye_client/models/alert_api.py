# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class AlertApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'template': 'AlertTemplateApi',
        'template_properties': 'dict(str, object)',
        'cron': 'str',
        'last_timestamp': 'datetime',
        'active': 'bool',
        'created': 'datetime',
        'updated': 'datetime',
        'owner': 'UserApi',
        'subscription_groups': 'list[SubscriptionGroupApi]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'template': 'template',
        'template_properties': 'templateProperties',
        'cron': 'cron',
        'last_timestamp': 'lastTimestamp',
        'active': 'active',
        'created': 'created',
        'updated': 'updated',
        'owner': 'owner',
        'subscription_groups': 'subscriptionGroups'
    }

    def __init__(self, id=None, name=None, description=None, template=None, template_properties=None, cron=None, last_timestamp=None, active=None, created=None, updated=None, owner=None, subscription_groups=None, _configuration=None):  # noqa: E501
        """AlertApi - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._template = None
        self._template_properties = None
        self._cron = None
        self._last_timestamp = None
        self._active = None
        self._created = None
        self._updated = None
        self._owner = None
        self._subscription_groups = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if template is not None:
            self.template = template
        if template_properties is not None:
            self.template_properties = template_properties
        if cron is not None:
            self.cron = cron
        if last_timestamp is not None:
            self.last_timestamp = last_timestamp
        if active is not None:
            self.active = active
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if owner is not None:
            self.owner = owner
        if subscription_groups is not None:
            self.subscription_groups = subscription_groups

    @property
    def id(self):
        """Gets the id of this AlertApi.  # noqa: E501


        :return: The id of this AlertApi.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlertApi.


        :param id: The id of this AlertApi.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AlertApi.  # noqa: E501


        :return: The name of this AlertApi.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertApi.


        :param name: The name of this AlertApi.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AlertApi.  # noqa: E501


        :return: The description of this AlertApi.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertApi.


        :param description: The description of this AlertApi.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def template(self):
        """Gets the template of this AlertApi.  # noqa: E501


        :return: The template of this AlertApi.  # noqa: E501
        :rtype: AlertTemplateApi
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this AlertApi.


        :param template: The template of this AlertApi.  # noqa: E501
        :type: AlertTemplateApi
        """

        self._template = template

    @property
    def template_properties(self):
        """Gets the template_properties of this AlertApi.  # noqa: E501


        :return: The template_properties of this AlertApi.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._template_properties

    @template_properties.setter
    def template_properties(self, template_properties):
        """Sets the template_properties of this AlertApi.


        :param template_properties: The template_properties of this AlertApi.  # noqa: E501
        :type: dict(str, object)
        """

        self._template_properties = template_properties

    @property
    def cron(self):
        """Gets the cron of this AlertApi.  # noqa: E501


        :return: The cron of this AlertApi.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this AlertApi.


        :param cron: The cron of this AlertApi.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this AlertApi.  # noqa: E501


        :return: The last_timestamp of this AlertApi.  # noqa: E501
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this AlertApi.


        :param last_timestamp: The last_timestamp of this AlertApi.  # noqa: E501
        :type: datetime
        """

        self._last_timestamp = last_timestamp

    @property
    def active(self):
        """Gets the active of this AlertApi.  # noqa: E501


        :return: The active of this AlertApi.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AlertApi.


        :param active: The active of this AlertApi.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def created(self):
        """Gets the created of this AlertApi.  # noqa: E501


        :return: The created of this AlertApi.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AlertApi.


        :param created: The created of this AlertApi.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this AlertApi.  # noqa: E501


        :return: The updated of this AlertApi.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AlertApi.


        :param updated: The updated of this AlertApi.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def owner(self):
        """Gets the owner of this AlertApi.  # noqa: E501


        :return: The owner of this AlertApi.  # noqa: E501
        :rtype: UserApi
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AlertApi.


        :param owner: The owner of this AlertApi.  # noqa: E501
        :type: UserApi
        """

        self._owner = owner

    @property
    def subscription_groups(self):
        """Gets the subscription_groups of this AlertApi.  # noqa: E501


        :return: The subscription_groups of this AlertApi.  # noqa: E501
        :rtype: list[SubscriptionGroupApi]
        """
        return self._subscription_groups

    @subscription_groups.setter
    def subscription_groups(self, subscription_groups):
        """Sets the subscription_groups of this AlertApi.


        :param subscription_groups: The subscription_groups of this AlertApi.  # noqa: E501
        :type: list[SubscriptionGroupApi]
        """

        self._subscription_groups = subscription_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertApi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertApi):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertApi):
            return True

        return self.to_dict() != other.to_dict()
