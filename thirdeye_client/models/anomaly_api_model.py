# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class AnomalyApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'avg_current_val': 'float',
        'avg_baseline_val': 'float',
        'score': 'float',
        'weight': 'float',
        'impact_to_global': 'float',
        'source_type': 'str',
        'created': 'datetime',
        'notified': 'bool',
        'message': 'str',
        'alert': 'AlertApiModel',
        'alert_node': 'AlertNodeApiModel',
        'metric': 'MetricApiModel',
        'metadata': 'AlertMetadataApiModel',
        'children': 'list[AnomalyApiModel]',
        'type': 'str',
        'severity': 'str',
        'feedback': 'AnomalyFeedbackApiModel',
        'enumeration_item': 'EnumerationItemApiModel',
        'anomaly_labels': 'list[AnomalyLabelApiModel]',
        'child': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'avg_current_val': 'avgCurrentVal',
        'avg_baseline_val': 'avgBaselineVal',
        'score': 'score',
        'weight': 'weight',
        'impact_to_global': 'impactToGlobal',
        'source_type': 'sourceType',
        'created': 'created',
        'notified': 'notified',
        'message': 'message',
        'alert': 'alert',
        'alert_node': 'alertNode',
        'metric': 'metric',
        'metadata': 'metadata',
        'children': 'children',
        'type': 'type',
        'severity': 'severity',
        'feedback': 'feedback',
        'enumeration_item': 'enumerationItem',
        'anomaly_labels': 'anomalyLabels',
        'child': 'child'
    }

    def __init__(self, id=None, start_time=None, end_time=None, avg_current_val=None, avg_baseline_val=None, score=None, weight=None, impact_to_global=None, source_type=None, created=None, notified=None, message=None, alert=None, alert_node=None, metric=None, metadata=None, children=None, type=None, severity=None, feedback=None, enumeration_item=None, anomaly_labels=None, child=None, _configuration=None):  # noqa: E501
        """AnomalyApiModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._start_time = None
        self._end_time = None
        self._avg_current_val = None
        self._avg_baseline_val = None
        self._score = None
        self._weight = None
        self._impact_to_global = None
        self._source_type = None
        self._created = None
        self._notified = None
        self._message = None
        self._alert = None
        self._alert_node = None
        self._metric = None
        self._metadata = None
        self._children = None
        self._type = None
        self._severity = None
        self._feedback = None
        self._enumeration_item = None
        self._anomaly_labels = None
        self._child = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if avg_current_val is not None:
            self.avg_current_val = avg_current_val
        if avg_baseline_val is not None:
            self.avg_baseline_val = avg_baseline_val
        if score is not None:
            self.score = score
        if weight is not None:
            self.weight = weight
        if impact_to_global is not None:
            self.impact_to_global = impact_to_global
        if source_type is not None:
            self.source_type = source_type
        if created is not None:
            self.created = created
        if notified is not None:
            self.notified = notified
        if message is not None:
            self.message = message
        if alert is not None:
            self.alert = alert
        if alert_node is not None:
            self.alert_node = alert_node
        if metric is not None:
            self.metric = metric
        if metadata is not None:
            self.metadata = metadata
        if children is not None:
            self.children = children
        if type is not None:
            self.type = type
        if severity is not None:
            self.severity = severity
        if feedback is not None:
            self.feedback = feedback
        if enumeration_item is not None:
            self.enumeration_item = enumeration_item
        if anomaly_labels is not None:
            self.anomaly_labels = anomaly_labels
        if child is not None:
            self.child = child

    @property
    def id(self):
        """Gets the id of this AnomalyApiModel.  # noqa: E501


        :return: The id of this AnomalyApiModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnomalyApiModel.


        :param id: The id of this AnomalyApiModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def start_time(self):
        """Gets the start_time of this AnomalyApiModel.  # noqa: E501


        :return: The start_time of this AnomalyApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AnomalyApiModel.


        :param start_time: The start_time of this AnomalyApiModel.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AnomalyApiModel.  # noqa: E501


        :return: The end_time of this AnomalyApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AnomalyApiModel.


        :param end_time: The end_time of this AnomalyApiModel.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def avg_current_val(self):
        """Gets the avg_current_val of this AnomalyApiModel.  # noqa: E501


        :return: The avg_current_val of this AnomalyApiModel.  # noqa: E501
        :rtype: float
        """
        return self._avg_current_val

    @avg_current_val.setter
    def avg_current_val(self, avg_current_val):
        """Sets the avg_current_val of this AnomalyApiModel.


        :param avg_current_val: The avg_current_val of this AnomalyApiModel.  # noqa: E501
        :type: float
        """

        self._avg_current_val = avg_current_val

    @property
    def avg_baseline_val(self):
        """Gets the avg_baseline_val of this AnomalyApiModel.  # noqa: E501


        :return: The avg_baseline_val of this AnomalyApiModel.  # noqa: E501
        :rtype: float
        """
        return self._avg_baseline_val

    @avg_baseline_val.setter
    def avg_baseline_val(self, avg_baseline_val):
        """Sets the avg_baseline_val of this AnomalyApiModel.


        :param avg_baseline_val: The avg_baseline_val of this AnomalyApiModel.  # noqa: E501
        :type: float
        """

        self._avg_baseline_val = avg_baseline_val

    @property
    def score(self):
        """Gets the score of this AnomalyApiModel.  # noqa: E501


        :return: The score of this AnomalyApiModel.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this AnomalyApiModel.


        :param score: The score of this AnomalyApiModel.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def weight(self):
        """Gets the weight of this AnomalyApiModel.  # noqa: E501


        :return: The weight of this AnomalyApiModel.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this AnomalyApiModel.


        :param weight: The weight of this AnomalyApiModel.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def impact_to_global(self):
        """Gets the impact_to_global of this AnomalyApiModel.  # noqa: E501


        :return: The impact_to_global of this AnomalyApiModel.  # noqa: E501
        :rtype: float
        """
        return self._impact_to_global

    @impact_to_global.setter
    def impact_to_global(self, impact_to_global):
        """Sets the impact_to_global of this AnomalyApiModel.


        :param impact_to_global: The impact_to_global of this AnomalyApiModel.  # noqa: E501
        :type: float
        """

        self._impact_to_global = impact_to_global

    @property
    def source_type(self):
        """Gets the source_type of this AnomalyApiModel.  # noqa: E501


        :return: The source_type of this AnomalyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AnomalyApiModel.


        :param source_type: The source_type of this AnomalyApiModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT_ANOMALY_DETECTION", "ANOMALY_REPLAY", "USER_LABELED_ANOMALY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source_type not in allowed_values):
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def created(self):
        """Gets the created of this AnomalyApiModel.  # noqa: E501


        :return: The created of this AnomalyApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AnomalyApiModel.


        :param created: The created of this AnomalyApiModel.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def notified(self):
        """Gets the notified of this AnomalyApiModel.  # noqa: E501


        :return: The notified of this AnomalyApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._notified

    @notified.setter
    def notified(self, notified):
        """Sets the notified of this AnomalyApiModel.


        :param notified: The notified of this AnomalyApiModel.  # noqa: E501
        :type: bool
        """

        self._notified = notified

    @property
    def message(self):
        """Gets the message of this AnomalyApiModel.  # noqa: E501


        :return: The message of this AnomalyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AnomalyApiModel.


        :param message: The message of this AnomalyApiModel.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def alert(self):
        """Gets the alert of this AnomalyApiModel.  # noqa: E501


        :return: The alert of this AnomalyApiModel.  # noqa: E501
        :rtype: AlertApiModel
        """
        return self._alert

    @alert.setter
    def alert(self, alert):
        """Sets the alert of this AnomalyApiModel.


        :param alert: The alert of this AnomalyApiModel.  # noqa: E501
        :type: AlertApiModel
        """

        self._alert = alert

    @property
    def alert_node(self):
        """Gets the alert_node of this AnomalyApiModel.  # noqa: E501


        :return: The alert_node of this AnomalyApiModel.  # noqa: E501
        :rtype: AlertNodeApiModel
        """
        return self._alert_node

    @alert_node.setter
    def alert_node(self, alert_node):
        """Sets the alert_node of this AnomalyApiModel.


        :param alert_node: The alert_node of this AnomalyApiModel.  # noqa: E501
        :type: AlertNodeApiModel
        """

        self._alert_node = alert_node

    @property
    def metric(self):
        """Gets the metric of this AnomalyApiModel.  # noqa: E501


        :return: The metric of this AnomalyApiModel.  # noqa: E501
        :rtype: MetricApiModel
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this AnomalyApiModel.


        :param metric: The metric of this AnomalyApiModel.  # noqa: E501
        :type: MetricApiModel
        """

        self._metric = metric

    @property
    def metadata(self):
        """Gets the metadata of this AnomalyApiModel.  # noqa: E501


        :return: The metadata of this AnomalyApiModel.  # noqa: E501
        :rtype: AlertMetadataApiModel
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AnomalyApiModel.


        :param metadata: The metadata of this AnomalyApiModel.  # noqa: E501
        :type: AlertMetadataApiModel
        """

        self._metadata = metadata

    @property
    def children(self):
        """Gets the children of this AnomalyApiModel.  # noqa: E501


        :return: The children of this AnomalyApiModel.  # noqa: E501
        :rtype: list[AnomalyApiModel]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this AnomalyApiModel.


        :param children: The children of this AnomalyApiModel.  # noqa: E501
        :type: list[AnomalyApiModel]
        """

        self._children = children

    @property
    def type(self):
        """Gets the type of this AnomalyApiModel.  # noqa: E501


        :return: The type of this AnomalyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnomalyApiModel.


        :param type: The type of this AnomalyApiModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEVIATION", "TREND_CHANGE", "DATA_SLA"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def severity(self):
        """Gets the severity of this AnomalyApiModel.  # noqa: E501


        :return: The severity of this AnomalyApiModel.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AnomalyApiModel.


        :param severity: The severity of this AnomalyApiModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["CRITICAL", "HIGH", "MEDIUM", "LOW", "DEFAULT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                severity not in allowed_values):
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def feedback(self):
        """Gets the feedback of this AnomalyApiModel.  # noqa: E501


        :return: The feedback of this AnomalyApiModel.  # noqa: E501
        :rtype: AnomalyFeedbackApiModel
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this AnomalyApiModel.


        :param feedback: The feedback of this AnomalyApiModel.  # noqa: E501
        :type: AnomalyFeedbackApiModel
        """

        self._feedback = feedback

    @property
    def enumeration_item(self):
        """Gets the enumeration_item of this AnomalyApiModel.  # noqa: E501


        :return: The enumeration_item of this AnomalyApiModel.  # noqa: E501
        :rtype: EnumerationItemApiModel
        """
        return self._enumeration_item

    @enumeration_item.setter
    def enumeration_item(self, enumeration_item):
        """Sets the enumeration_item of this AnomalyApiModel.


        :param enumeration_item: The enumeration_item of this AnomalyApiModel.  # noqa: E501
        :type: EnumerationItemApiModel
        """

        self._enumeration_item = enumeration_item

    @property
    def anomaly_labels(self):
        """Gets the anomaly_labels of this AnomalyApiModel.  # noqa: E501


        :return: The anomaly_labels of this AnomalyApiModel.  # noqa: E501
        :rtype: list[AnomalyLabelApiModel]
        """
        return self._anomaly_labels

    @anomaly_labels.setter
    def anomaly_labels(self, anomaly_labels):
        """Sets the anomaly_labels of this AnomalyApiModel.


        :param anomaly_labels: The anomaly_labels of this AnomalyApiModel.  # noqa: E501
        :type: list[AnomalyLabelApiModel]
        """

        self._anomaly_labels = anomaly_labels

    @property
    def child(self):
        """Gets the child of this AnomalyApiModel.  # noqa: E501


        :return: The child of this AnomalyApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._child

    @child.setter
    def child(self, child):
        """Sets the child of this AnomalyApiModel.


        :param child: The child of this AnomalyApiModel.  # noqa: E501
        :type: bool
        """

        self._child = child

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnomalyApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnomalyApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnomalyApiModel):
            return True

        return self.to_dict() != other.to_dict()
