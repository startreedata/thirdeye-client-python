# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class TimeWindowSuppressorApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'window_start_time': 'int',
        'window_end_time': 'int',
        'expected_change': 'float',
        'acceptable_deviation': 'float',
        'threshold_applied': 'bool'
    }

    attribute_map = {
        'window_start_time': 'windowStartTime',
        'window_end_time': 'windowEndTime',
        'expected_change': 'expectedChange',
        'acceptable_deviation': 'acceptableDeviation',
        'threshold_applied': 'thresholdApplied'
    }

    def __init__(self, window_start_time=None, window_end_time=None, expected_change=None, acceptable_deviation=None, threshold_applied=None, _configuration=None):  # noqa: E501
        """TimeWindowSuppressorApiModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._window_start_time = None
        self._window_end_time = None
        self._expected_change = None
        self._acceptable_deviation = None
        self._threshold_applied = None
        self.discriminator = None

        if window_start_time is not None:
            self.window_start_time = window_start_time
        if window_end_time is not None:
            self.window_end_time = window_end_time
        if expected_change is not None:
            self.expected_change = expected_change
        if acceptable_deviation is not None:
            self.acceptable_deviation = acceptable_deviation
        if threshold_applied is not None:
            self.threshold_applied = threshold_applied

    @property
    def window_start_time(self):
        """Gets the window_start_time of this TimeWindowSuppressorApiModel.  # noqa: E501


        :return: The window_start_time of this TimeWindowSuppressorApiModel.  # noqa: E501
        :rtype: int
        """
        return self._window_start_time

    @window_start_time.setter
    def window_start_time(self, window_start_time):
        """Sets the window_start_time of this TimeWindowSuppressorApiModel.


        :param window_start_time: The window_start_time of this TimeWindowSuppressorApiModel.  # noqa: E501
        :type: int
        """

        self._window_start_time = window_start_time

    @property
    def window_end_time(self):
        """Gets the window_end_time of this TimeWindowSuppressorApiModel.  # noqa: E501


        :return: The window_end_time of this TimeWindowSuppressorApiModel.  # noqa: E501
        :rtype: int
        """
        return self._window_end_time

    @window_end_time.setter
    def window_end_time(self, window_end_time):
        """Sets the window_end_time of this TimeWindowSuppressorApiModel.


        :param window_end_time: The window_end_time of this TimeWindowSuppressorApiModel.  # noqa: E501
        :type: int
        """

        self._window_end_time = window_end_time

    @property
    def expected_change(self):
        """Gets the expected_change of this TimeWindowSuppressorApiModel.  # noqa: E501


        :return: The expected_change of this TimeWindowSuppressorApiModel.  # noqa: E501
        :rtype: float
        """
        return self._expected_change

    @expected_change.setter
    def expected_change(self, expected_change):
        """Sets the expected_change of this TimeWindowSuppressorApiModel.


        :param expected_change: The expected_change of this TimeWindowSuppressorApiModel.  # noqa: E501
        :type: float
        """

        self._expected_change = expected_change

    @property
    def acceptable_deviation(self):
        """Gets the acceptable_deviation of this TimeWindowSuppressorApiModel.  # noqa: E501


        :return: The acceptable_deviation of this TimeWindowSuppressorApiModel.  # noqa: E501
        :rtype: float
        """
        return self._acceptable_deviation

    @acceptable_deviation.setter
    def acceptable_deviation(self, acceptable_deviation):
        """Sets the acceptable_deviation of this TimeWindowSuppressorApiModel.


        :param acceptable_deviation: The acceptable_deviation of this TimeWindowSuppressorApiModel.  # noqa: E501
        :type: float
        """

        self._acceptable_deviation = acceptable_deviation

    @property
    def threshold_applied(self):
        """Gets the threshold_applied of this TimeWindowSuppressorApiModel.  # noqa: E501


        :return: The threshold_applied of this TimeWindowSuppressorApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._threshold_applied

    @threshold_applied.setter
    def threshold_applied(self, threshold_applied):
        """Sets the threshold_applied of this TimeWindowSuppressorApiModel.


        :param threshold_applied: The threshold_applied of this TimeWindowSuppressorApiModel.  # noqa: E501
        :type: bool
        """

        self._threshold_applied = threshold_applied

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeWindowSuppressorApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeWindowSuppressorApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeWindowSuppressorApiModel):
            return True

        return self.to_dict() != other.to_dict()
