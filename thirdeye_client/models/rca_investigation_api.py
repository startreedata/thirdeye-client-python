# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class RcaInvestigationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'text': 'str',
        'ui_metadata': 'dict(str, object)',
        'anomaly': 'AnomalyApi',
        'created': 'datetime',
        'created_by': 'UserApi',
        'updated': 'datetime',
        'updated_by': 'UserApi'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'text': 'text',
        'ui_metadata': 'uiMetadata',
        'anomaly': 'anomaly',
        'created': 'created',
        'created_by': 'createdBy',
        'updated': 'updated',
        'updated_by': 'updatedBy'
    }

    def __init__(self, id=None, name=None, text=None, ui_metadata=None, anomaly=None, created=None, created_by=None, updated=None, updated_by=None, _configuration=None):  # noqa: E501
        """RcaInvestigationApi - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._text = None
        self._ui_metadata = None
        self._anomaly = None
        self._created = None
        self._created_by = None
        self._updated = None
        self._updated_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if text is not None:
            self.text = text
        if ui_metadata is not None:
            self.ui_metadata = ui_metadata
        if anomaly is not None:
            self.anomaly = anomaly
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if updated is not None:
            self.updated = updated
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def id(self):
        """Gets the id of this RcaInvestigationApi.  # noqa: E501


        :return: The id of this RcaInvestigationApi.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RcaInvestigationApi.


        :param id: The id of this RcaInvestigationApi.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RcaInvestigationApi.  # noqa: E501


        :return: The name of this RcaInvestigationApi.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RcaInvestigationApi.


        :param name: The name of this RcaInvestigationApi.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def text(self):
        """Gets the text of this RcaInvestigationApi.  # noqa: E501


        :return: The text of this RcaInvestigationApi.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RcaInvestigationApi.


        :param text: The text of this RcaInvestigationApi.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def ui_metadata(self):
        """Gets the ui_metadata of this RcaInvestigationApi.  # noqa: E501


        :return: The ui_metadata of this RcaInvestigationApi.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._ui_metadata

    @ui_metadata.setter
    def ui_metadata(self, ui_metadata):
        """Sets the ui_metadata of this RcaInvestigationApi.


        :param ui_metadata: The ui_metadata of this RcaInvestigationApi.  # noqa: E501
        :type: dict(str, object)
        """

        self._ui_metadata = ui_metadata

    @property
    def anomaly(self):
        """Gets the anomaly of this RcaInvestigationApi.  # noqa: E501


        :return: The anomaly of this RcaInvestigationApi.  # noqa: E501
        :rtype: AnomalyApi
        """
        return self._anomaly

    @anomaly.setter
    def anomaly(self, anomaly):
        """Sets the anomaly of this RcaInvestigationApi.


        :param anomaly: The anomaly of this RcaInvestigationApi.  # noqa: E501
        :type: AnomalyApi
        """

        self._anomaly = anomaly

    @property
    def created(self):
        """Gets the created of this RcaInvestigationApi.  # noqa: E501


        :return: The created of this RcaInvestigationApi.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RcaInvestigationApi.


        :param created: The created of this RcaInvestigationApi.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this RcaInvestigationApi.  # noqa: E501


        :return: The created_by of this RcaInvestigationApi.  # noqa: E501
        :rtype: UserApi
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RcaInvestigationApi.


        :param created_by: The created_by of this RcaInvestigationApi.  # noqa: E501
        :type: UserApi
        """

        self._created_by = created_by

    @property
    def updated(self):
        """Gets the updated of this RcaInvestigationApi.  # noqa: E501


        :return: The updated of this RcaInvestigationApi.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this RcaInvestigationApi.


        :param updated: The updated of this RcaInvestigationApi.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def updated_by(self):
        """Gets the updated_by of this RcaInvestigationApi.  # noqa: E501


        :return: The updated_by of this RcaInvestigationApi.  # noqa: E501
        :rtype: UserApi
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this RcaInvestigationApi.


        :param updated_by: The updated_by of this RcaInvestigationApi.  # noqa: E501
        :type: UserApi
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RcaInvestigationApi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RcaInvestigationApi):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RcaInvestigationApi):
            return True

        return self.to_dict() != other.to_dict()
