# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class SubscriptionGroupApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'active': 'bool',
        'type': 'str',
        'alerts': 'list[AlertApiModel]',
        'cron': 'str',
        'created': 'datetime',
        'updated': 'datetime',
        'owner': 'UserApiModel',
        'specs': 'list[NotificationSpecApiModel]',
        'notification_schemes': 'NotificationSchemesApiModel',
        'alert_suppressors': 'TimeWindowSuppressorApiModel'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'active': 'active',
        'type': 'type',
        'alerts': 'alerts',
        'cron': 'cron',
        'created': 'created',
        'updated': 'updated',
        'owner': 'owner',
        'specs': 'specs',
        'notification_schemes': 'notificationSchemes',
        'alert_suppressors': 'alertSuppressors'
    }

    def __init__(self, id=None, name=None, active=None, type=None, alerts=None, cron=None, created=None, updated=None, owner=None, specs=None, notification_schemes=None, alert_suppressors=None, _configuration=None):  # noqa: E501
        """SubscriptionGroupApiModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._active = None
        self._type = None
        self._alerts = None
        self._cron = None
        self._created = None
        self._updated = None
        self._owner = None
        self._specs = None
        self._notification_schemes = None
        self._alert_suppressors = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if active is not None:
            self.active = active
        if type is not None:
            self.type = type
        if alerts is not None:
            self.alerts = alerts
        if cron is not None:
            self.cron = cron
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated
        if owner is not None:
            self.owner = owner
        if specs is not None:
            self.specs = specs
        if notification_schemes is not None:
            self.notification_schemes = notification_schemes
        if alert_suppressors is not None:
            self.alert_suppressors = alert_suppressors

    @property
    def id(self):
        """Gets the id of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The id of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionGroupApiModel.


        :param id: The id of this SubscriptionGroupApiModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The name of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionGroupApiModel.


        :param name: The name of this SubscriptionGroupApiModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def active(self):
        """Gets the active of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The active of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SubscriptionGroupApiModel.


        :param active: The active of this SubscriptionGroupApiModel.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def type(self):
        """Gets the type of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The type of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubscriptionGroupApiModel.


        :param type: The type of this SubscriptionGroupApiModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def alerts(self):
        """Gets the alerts of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The alerts of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: list[AlertApiModel]
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this SubscriptionGroupApiModel.


        :param alerts: The alerts of this SubscriptionGroupApiModel.  # noqa: E501
        :type: list[AlertApiModel]
        """

        self._alerts = alerts

    @property
    def cron(self):
        """Gets the cron of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The cron of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: str
        """
        return self._cron

    @cron.setter
    def cron(self, cron):
        """Sets the cron of this SubscriptionGroupApiModel.


        :param cron: The cron of this SubscriptionGroupApiModel.  # noqa: E501
        :type: str
        """

        self._cron = cron

    @property
    def created(self):
        """Gets the created of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The created of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SubscriptionGroupApiModel.


        :param created: The created of this SubscriptionGroupApiModel.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The updated of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this SubscriptionGroupApiModel.


        :param updated: The updated of this SubscriptionGroupApiModel.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def owner(self):
        """Gets the owner of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The owner of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: UserApiModel
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this SubscriptionGroupApiModel.


        :param owner: The owner of this SubscriptionGroupApiModel.  # noqa: E501
        :type: UserApiModel
        """

        self._owner = owner

    @property
    def specs(self):
        """Gets the specs of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The specs of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: list[NotificationSpecApiModel]
        """
        return self._specs

    @specs.setter
    def specs(self, specs):
        """Sets the specs of this SubscriptionGroupApiModel.


        :param specs: The specs of this SubscriptionGroupApiModel.  # noqa: E501
        :type: list[NotificationSpecApiModel]
        """

        self._specs = specs

    @property
    def notification_schemes(self):
        """Gets the notification_schemes of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The notification_schemes of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: NotificationSchemesApiModel
        """
        return self._notification_schemes

    @notification_schemes.setter
    def notification_schemes(self, notification_schemes):
        """Sets the notification_schemes of this SubscriptionGroupApiModel.


        :param notification_schemes: The notification_schemes of this SubscriptionGroupApiModel.  # noqa: E501
        :type: NotificationSchemesApiModel
        """

        self._notification_schemes = notification_schemes

    @property
    def alert_suppressors(self):
        """Gets the alert_suppressors of this SubscriptionGroupApiModel.  # noqa: E501


        :return: The alert_suppressors of this SubscriptionGroupApiModel.  # noqa: E501
        :rtype: TimeWindowSuppressorApiModel
        """
        return self._alert_suppressors

    @alert_suppressors.setter
    def alert_suppressors(self, alert_suppressors):
        """Sets the alert_suppressors of this SubscriptionGroupApiModel.


        :param alert_suppressors: The alert_suppressors of this SubscriptionGroupApiModel.  # noqa: E501
        :type: TimeWindowSuppressorApiModel
        """

        self._alert_suppressors = alert_suppressors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionGroupApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionGroupApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionGroupApiModel):
            return True

        return self.to_dict() != other.to_dict()
