# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class TemplatePropertyMetadataModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'default_value': 'object',
        'default_is_null': 'bool',
        'min': 'NumberModel',
        'max': 'NumberModel',
        'options': 'list[object]',
        'json_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'default_value': 'defaultValue',
        'default_is_null': 'defaultIsNull',
        'min': 'min',
        'max': 'max',
        'options': 'options',
        'json_type': 'jsonType'
    }

    def __init__(self, name=None, description=None, default_value=None, default_is_null=None, min=None, max=None, options=None, json_type=None, _configuration=None):  # noqa: E501
        """TemplatePropertyMetadataModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._description = None
        self._default_value = None
        self._default_is_null = None
        self._min = None
        self._max = None
        self._options = None
        self._json_type = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if default_value is not None:
            self.default_value = default_value
        if default_is_null is not None:
            self.default_is_null = default_is_null
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if options is not None:
            self.options = options
        if json_type is not None:
            self.json_type = json_type

    @property
    def name(self):
        """Gets the name of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The name of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplatePropertyMetadataModel.


        :param name: The name of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The description of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplatePropertyMetadataModel.


        :param description: The description of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def default_value(self):
        """Gets the default_value of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The default_value of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this TemplatePropertyMetadataModel.


        :param default_value: The default_value of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: object
        """

        self._default_value = default_value

    @property
    def default_is_null(self):
        """Gets the default_is_null of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The default_is_null of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: bool
        """
        return self._default_is_null

    @default_is_null.setter
    def default_is_null(self, default_is_null):
        """Sets the default_is_null of this TemplatePropertyMetadataModel.


        :param default_is_null: The default_is_null of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: bool
        """

        self._default_is_null = default_is_null

    @property
    def min(self):
        """Gets the min of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The min of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: NumberModel
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this TemplatePropertyMetadataModel.


        :param min: The min of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: NumberModel
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The max of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: NumberModel
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this TemplatePropertyMetadataModel.


        :param max: The max of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: NumberModel
        """

        self._max = max

    @property
    def options(self):
        """Gets the options of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The options of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: list[object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this TemplatePropertyMetadataModel.


        :param options: The options of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: list[object]
        """

        self._options = options

    @property
    def json_type(self):
        """Gets the json_type of this TemplatePropertyMetadataModel.  # noqa: E501


        :return: The json_type of this TemplatePropertyMetadataModel.  # noqa: E501
        :rtype: str
        """
        return self._json_type

    @json_type.setter
    def json_type(self, json_type):
        """Sets the json_type of this TemplatePropertyMetadataModel.


        :param json_type: The json_type of this TemplatePropertyMetadataModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "NUMBER", "INTEGER", "OBJECT", "ARRAY", "BOOLEAN", "NULL"]  # noqa: E501
        if (self._configuration.client_side_validation and
                json_type not in allowed_values):
            raise ValueError(
                "Invalid value for `json_type` ({0}), must be one of {1}"  # noqa: E501
                .format(json_type, allowed_values)
            )

        self._json_type = json_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplatePropertyMetadataModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplatePropertyMetadataModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplatePropertyMetadataModel):
            return True

        return self.to_dict() != other.to_dict()
