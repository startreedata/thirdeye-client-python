# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class AlertMetadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datasource': 'DataSourceApi',
        'dataset': 'DatasetApi',
        'metric': 'MetricApi',
        'granularity': 'str',
        'timezone': 'str',
        'event_context': 'EventContextApi'
    }

    attribute_map = {
        'datasource': 'datasource',
        'dataset': 'dataset',
        'metric': 'metric',
        'granularity': 'granularity',
        'timezone': 'timezone',
        'event_context': 'eventContext'
    }

    def __init__(self, datasource=None, dataset=None, metric=None, granularity=None, timezone=None, event_context=None, _configuration=None):  # noqa: E501
        """AlertMetadataApi - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._datasource = None
        self._dataset = None
        self._metric = None
        self._granularity = None
        self._timezone = None
        self._event_context = None
        self.discriminator = None

        if datasource is not None:
            self.datasource = datasource
        if dataset is not None:
            self.dataset = dataset
        if metric is not None:
            self.metric = metric
        if granularity is not None:
            self.granularity = granularity
        if timezone is not None:
            self.timezone = timezone
        if event_context is not None:
            self.event_context = event_context

    @property
    def datasource(self):
        """Gets the datasource of this AlertMetadataApi.  # noqa: E501


        :return: The datasource of this AlertMetadataApi.  # noqa: E501
        :rtype: DataSourceApi
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this AlertMetadataApi.


        :param datasource: The datasource of this AlertMetadataApi.  # noqa: E501
        :type: DataSourceApi
        """

        self._datasource = datasource

    @property
    def dataset(self):
        """Gets the dataset of this AlertMetadataApi.  # noqa: E501


        :return: The dataset of this AlertMetadataApi.  # noqa: E501
        :rtype: DatasetApi
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AlertMetadataApi.


        :param dataset: The dataset of this AlertMetadataApi.  # noqa: E501
        :type: DatasetApi
        """

        self._dataset = dataset

    @property
    def metric(self):
        """Gets the metric of this AlertMetadataApi.  # noqa: E501


        :return: The metric of this AlertMetadataApi.  # noqa: E501
        :rtype: MetricApi
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this AlertMetadataApi.


        :param metric: The metric of this AlertMetadataApi.  # noqa: E501
        :type: MetricApi
        """

        self._metric = metric

    @property
    def granularity(self):
        """Gets the granularity of this AlertMetadataApi.  # noqa: E501


        :return: The granularity of this AlertMetadataApi.  # noqa: E501
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this AlertMetadataApi.


        :param granularity: The granularity of this AlertMetadataApi.  # noqa: E501
        :type: str
        """

        self._granularity = granularity

    @property
    def timezone(self):
        """Gets the timezone of this AlertMetadataApi.  # noqa: E501


        :return: The timezone of this AlertMetadataApi.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this AlertMetadataApi.


        :param timezone: The timezone of this AlertMetadataApi.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def event_context(self):
        """Gets the event_context of this AlertMetadataApi.  # noqa: E501


        :return: The event_context of this AlertMetadataApi.  # noqa: E501
        :rtype: EventContextApi
        """
        return self._event_context

    @event_context.setter
    def event_context(self, event_context):
        """Sets the event_context of this AlertMetadataApi.


        :param event_context: The event_context of this AlertMetadataApi.  # noqa: E501
        :type: EventContextApi
        """

        self._event_context = event_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertMetadataApi, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertMetadataApi):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertMetadataApi):
            return True

        return self.to_dict() != other.to_dict()
