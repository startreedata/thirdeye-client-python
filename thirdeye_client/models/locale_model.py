# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class LocaleModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script': 'str',
        'country': 'str',
        'variant': 'str',
        'extension_keys': 'list[str]',
        'unicode_locale_attributes': 'list[str]',
        'unicode_locale_keys': 'list[str]',
        'iso3_language': 'str',
        'iso3_country': 'str',
        'display_language': 'str',
        'display_script': 'str',
        'display_country': 'str',
        'display_variant': 'str',
        'display_name': 'str',
        'language': 'str'
    }

    attribute_map = {
        'script': 'script',
        'country': 'country',
        'variant': 'variant',
        'extension_keys': 'extensionKeys',
        'unicode_locale_attributes': 'unicodeLocaleAttributes',
        'unicode_locale_keys': 'unicodeLocaleKeys',
        'iso3_language': 'iso3Language',
        'iso3_country': 'iso3Country',
        'display_language': 'displayLanguage',
        'display_script': 'displayScript',
        'display_country': 'displayCountry',
        'display_variant': 'displayVariant',
        'display_name': 'displayName',
        'language': 'language'
    }

    def __init__(self, script=None, country=None, variant=None, extension_keys=None, unicode_locale_attributes=None, unicode_locale_keys=None, iso3_language=None, iso3_country=None, display_language=None, display_script=None, display_country=None, display_variant=None, display_name=None, language=None, _configuration=None):  # noqa: E501
        """LocaleModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._script = None
        self._country = None
        self._variant = None
        self._extension_keys = None
        self._unicode_locale_attributes = None
        self._unicode_locale_keys = None
        self._iso3_language = None
        self._iso3_country = None
        self._display_language = None
        self._display_script = None
        self._display_country = None
        self._display_variant = None
        self._display_name = None
        self._language = None
        self.discriminator = None

        if script is not None:
            self.script = script
        if country is not None:
            self.country = country
        if variant is not None:
            self.variant = variant
        if extension_keys is not None:
            self.extension_keys = extension_keys
        if unicode_locale_attributes is not None:
            self.unicode_locale_attributes = unicode_locale_attributes
        if unicode_locale_keys is not None:
            self.unicode_locale_keys = unicode_locale_keys
        if iso3_language is not None:
            self.iso3_language = iso3_language
        if iso3_country is not None:
            self.iso3_country = iso3_country
        if display_language is not None:
            self.display_language = display_language
        if display_script is not None:
            self.display_script = display_script
        if display_country is not None:
            self.display_country = display_country
        if display_variant is not None:
            self.display_variant = display_variant
        if display_name is not None:
            self.display_name = display_name
        if language is not None:
            self.language = language

    @property
    def script(self):
        """Gets the script of this LocaleModel.  # noqa: E501


        :return: The script of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this LocaleModel.


        :param script: The script of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def country(self):
        """Gets the country of this LocaleModel.  # noqa: E501


        :return: The country of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LocaleModel.


        :param country: The country of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def variant(self):
        """Gets the variant of this LocaleModel.  # noqa: E501


        :return: The variant of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this LocaleModel.


        :param variant: The variant of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._variant = variant

    @property
    def extension_keys(self):
        """Gets the extension_keys of this LocaleModel.  # noqa: E501


        :return: The extension_keys of this LocaleModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._extension_keys

    @extension_keys.setter
    def extension_keys(self, extension_keys):
        """Sets the extension_keys of this LocaleModel.


        :param extension_keys: The extension_keys of this LocaleModel.  # noqa: E501
        :type: list[str]
        """

        self._extension_keys = extension_keys

    @property
    def unicode_locale_attributes(self):
        """Gets the unicode_locale_attributes of this LocaleModel.  # noqa: E501


        :return: The unicode_locale_attributes of this LocaleModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._unicode_locale_attributes

    @unicode_locale_attributes.setter
    def unicode_locale_attributes(self, unicode_locale_attributes):
        """Sets the unicode_locale_attributes of this LocaleModel.


        :param unicode_locale_attributes: The unicode_locale_attributes of this LocaleModel.  # noqa: E501
        :type: list[str]
        """

        self._unicode_locale_attributes = unicode_locale_attributes

    @property
    def unicode_locale_keys(self):
        """Gets the unicode_locale_keys of this LocaleModel.  # noqa: E501


        :return: The unicode_locale_keys of this LocaleModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._unicode_locale_keys

    @unicode_locale_keys.setter
    def unicode_locale_keys(self, unicode_locale_keys):
        """Sets the unicode_locale_keys of this LocaleModel.


        :param unicode_locale_keys: The unicode_locale_keys of this LocaleModel.  # noqa: E501
        :type: list[str]
        """

        self._unicode_locale_keys = unicode_locale_keys

    @property
    def iso3_language(self):
        """Gets the iso3_language of this LocaleModel.  # noqa: E501


        :return: The iso3_language of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._iso3_language

    @iso3_language.setter
    def iso3_language(self, iso3_language):
        """Sets the iso3_language of this LocaleModel.


        :param iso3_language: The iso3_language of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._iso3_language = iso3_language

    @property
    def iso3_country(self):
        """Gets the iso3_country of this LocaleModel.  # noqa: E501


        :return: The iso3_country of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._iso3_country

    @iso3_country.setter
    def iso3_country(self, iso3_country):
        """Sets the iso3_country of this LocaleModel.


        :param iso3_country: The iso3_country of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._iso3_country = iso3_country

    @property
    def display_language(self):
        """Gets the display_language of this LocaleModel.  # noqa: E501


        :return: The display_language of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._display_language

    @display_language.setter
    def display_language(self, display_language):
        """Sets the display_language of this LocaleModel.


        :param display_language: The display_language of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._display_language = display_language

    @property
    def display_script(self):
        """Gets the display_script of this LocaleModel.  # noqa: E501


        :return: The display_script of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._display_script

    @display_script.setter
    def display_script(self, display_script):
        """Sets the display_script of this LocaleModel.


        :param display_script: The display_script of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._display_script = display_script

    @property
    def display_country(self):
        """Gets the display_country of this LocaleModel.  # noqa: E501


        :return: The display_country of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._display_country

    @display_country.setter
    def display_country(self, display_country):
        """Sets the display_country of this LocaleModel.


        :param display_country: The display_country of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._display_country = display_country

    @property
    def display_variant(self):
        """Gets the display_variant of this LocaleModel.  # noqa: E501


        :return: The display_variant of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._display_variant

    @display_variant.setter
    def display_variant(self, display_variant):
        """Sets the display_variant of this LocaleModel.


        :param display_variant: The display_variant of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._display_variant = display_variant

    @property
    def display_name(self):
        """Gets the display_name of this LocaleModel.  # noqa: E501


        :return: The display_name of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LocaleModel.


        :param display_name: The display_name of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def language(self):
        """Gets the language of this LocaleModel.  # noqa: E501


        :return: The language of this LocaleModel.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LocaleModel.


        :param language: The language of this LocaleModel.  # noqa: E501
        :type: str
        """

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LocaleModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocaleModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocaleModel):
            return True

        return self.to_dict() != other.to_dict()
