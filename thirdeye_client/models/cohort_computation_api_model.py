# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from thirdeye_client.configuration import Configuration


class CohortComputationApiModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metric': 'MetricApiModel',
        'start': 'int',
        'end': 'int',
        'timezone': 'str',
        'aggregate': 'float',
        'threshold': 'float',
        'percentage': 'float',
        'generate_enumeration_items': 'bool',
        'enumeration_item_param_key': 'str',
        'dimensions': 'list[str]',
        'limit': 'int',
        'max_depth': 'int',
        'where': 'str',
        'having': 'str',
        'result_size': 'int',
        'results': 'list[DimensionFilterContributionApiModel]',
        'enumeration_items': 'list[EnumerationItemApiModel]',
        'round_off_threshold': 'bool'
    }

    attribute_map = {
        'metric': 'metric',
        'start': 'start',
        'end': 'end',
        'timezone': 'timezone',
        'aggregate': 'aggregate',
        'threshold': 'threshold',
        'percentage': 'percentage',
        'generate_enumeration_items': 'generateEnumerationItems',
        'enumeration_item_param_key': 'enumerationItemParamKey',
        'dimensions': 'dimensions',
        'limit': 'limit',
        'max_depth': 'maxDepth',
        'where': 'where',
        'having': 'having',
        'result_size': 'resultSize',
        'results': 'results',
        'enumeration_items': 'enumerationItems',
        'round_off_threshold': 'roundOffThreshold'
    }

    def __init__(self, metric=None, start=None, end=None, timezone=None, aggregate=None, threshold=None, percentage=None, generate_enumeration_items=None, enumeration_item_param_key=None, dimensions=None, limit=None, max_depth=None, where=None, having=None, result_size=None, results=None, enumeration_items=None, round_off_threshold=None, _configuration=None):  # noqa: E501
        """CohortComputationApiModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._metric = None
        self._start = None
        self._end = None
        self._timezone = None
        self._aggregate = None
        self._threshold = None
        self._percentage = None
        self._generate_enumeration_items = None
        self._enumeration_item_param_key = None
        self._dimensions = None
        self._limit = None
        self._max_depth = None
        self._where = None
        self._having = None
        self._result_size = None
        self._results = None
        self._enumeration_items = None
        self._round_off_threshold = None
        self.discriminator = None

        if metric is not None:
            self.metric = metric
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if timezone is not None:
            self.timezone = timezone
        if aggregate is not None:
            self.aggregate = aggregate
        if threshold is not None:
            self.threshold = threshold
        if percentage is not None:
            self.percentage = percentage
        if generate_enumeration_items is not None:
            self.generate_enumeration_items = generate_enumeration_items
        if enumeration_item_param_key is not None:
            self.enumeration_item_param_key = enumeration_item_param_key
        if dimensions is not None:
            self.dimensions = dimensions
        if limit is not None:
            self.limit = limit
        if max_depth is not None:
            self.max_depth = max_depth
        if where is not None:
            self.where = where
        if having is not None:
            self.having = having
        if result_size is not None:
            self.result_size = result_size
        if results is not None:
            self.results = results
        if enumeration_items is not None:
            self.enumeration_items = enumeration_items
        if round_off_threshold is not None:
            self.round_off_threshold = round_off_threshold

    @property
    def metric(self):
        """Gets the metric of this CohortComputationApiModel.  # noqa: E501


        :return: The metric of this CohortComputationApiModel.  # noqa: E501
        :rtype: MetricApiModel
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this CohortComputationApiModel.


        :param metric: The metric of this CohortComputationApiModel.  # noqa: E501
        :type: MetricApiModel
        """

        self._metric = metric

    @property
    def start(self):
        """Gets the start of this CohortComputationApiModel.  # noqa: E501


        :return: The start of this CohortComputationApiModel.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CohortComputationApiModel.


        :param start: The start of this CohortComputationApiModel.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this CohortComputationApiModel.  # noqa: E501


        :return: The end of this CohortComputationApiModel.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CohortComputationApiModel.


        :param end: The end of this CohortComputationApiModel.  # noqa: E501
        :type: int
        """

        self._end = end

    @property
    def timezone(self):
        """Gets the timezone of this CohortComputationApiModel.  # noqa: E501


        :return: The timezone of this CohortComputationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this CohortComputationApiModel.


        :param timezone: The timezone of this CohortComputationApiModel.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def aggregate(self):
        """Gets the aggregate of this CohortComputationApiModel.  # noqa: E501


        :return: The aggregate of this CohortComputationApiModel.  # noqa: E501
        :rtype: float
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """Sets the aggregate of this CohortComputationApiModel.


        :param aggregate: The aggregate of this CohortComputationApiModel.  # noqa: E501
        :type: float
        """

        self._aggregate = aggregate

    @property
    def threshold(self):
        """Gets the threshold of this CohortComputationApiModel.  # noqa: E501


        :return: The threshold of this CohortComputationApiModel.  # noqa: E501
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this CohortComputationApiModel.


        :param threshold: The threshold of this CohortComputationApiModel.  # noqa: E501
        :type: float
        """

        self._threshold = threshold

    @property
    def percentage(self):
        """Gets the percentage of this CohortComputationApiModel.  # noqa: E501


        :return: The percentage of this CohortComputationApiModel.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this CohortComputationApiModel.


        :param percentage: The percentage of this CohortComputationApiModel.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def generate_enumeration_items(self):
        """Gets the generate_enumeration_items of this CohortComputationApiModel.  # noqa: E501


        :return: The generate_enumeration_items of this CohortComputationApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._generate_enumeration_items

    @generate_enumeration_items.setter
    def generate_enumeration_items(self, generate_enumeration_items):
        """Sets the generate_enumeration_items of this CohortComputationApiModel.


        :param generate_enumeration_items: The generate_enumeration_items of this CohortComputationApiModel.  # noqa: E501
        :type: bool
        """

        self._generate_enumeration_items = generate_enumeration_items

    @property
    def enumeration_item_param_key(self):
        """Gets the enumeration_item_param_key of this CohortComputationApiModel.  # noqa: E501


        :return: The enumeration_item_param_key of this CohortComputationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._enumeration_item_param_key

    @enumeration_item_param_key.setter
    def enumeration_item_param_key(self, enumeration_item_param_key):
        """Sets the enumeration_item_param_key of this CohortComputationApiModel.


        :param enumeration_item_param_key: The enumeration_item_param_key of this CohortComputationApiModel.  # noqa: E501
        :type: str
        """

        self._enumeration_item_param_key = enumeration_item_param_key

    @property
    def dimensions(self):
        """Gets the dimensions of this CohortComputationApiModel.  # noqa: E501


        :return: The dimensions of this CohortComputationApiModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CohortComputationApiModel.


        :param dimensions: The dimensions of this CohortComputationApiModel.  # noqa: E501
        :type: list[str]
        """

        self._dimensions = dimensions

    @property
    def limit(self):
        """Gets the limit of this CohortComputationApiModel.  # noqa: E501


        :return: The limit of this CohortComputationApiModel.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CohortComputationApiModel.


        :param limit: The limit of this CohortComputationApiModel.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def max_depth(self):
        """Gets the max_depth of this CohortComputationApiModel.  # noqa: E501


        :return: The max_depth of this CohortComputationApiModel.  # noqa: E501
        :rtype: int
        """
        return self._max_depth

    @max_depth.setter
    def max_depth(self, max_depth):
        """Sets the max_depth of this CohortComputationApiModel.


        :param max_depth: The max_depth of this CohortComputationApiModel.  # noqa: E501
        :type: int
        """

        self._max_depth = max_depth

    @property
    def where(self):
        """Gets the where of this CohortComputationApiModel.  # noqa: E501


        :return: The where of this CohortComputationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this CohortComputationApiModel.


        :param where: The where of this CohortComputationApiModel.  # noqa: E501
        :type: str
        """

        self._where = where

    @property
    def having(self):
        """Gets the having of this CohortComputationApiModel.  # noqa: E501


        :return: The having of this CohortComputationApiModel.  # noqa: E501
        :rtype: str
        """
        return self._having

    @having.setter
    def having(self, having):
        """Sets the having of this CohortComputationApiModel.


        :param having: The having of this CohortComputationApiModel.  # noqa: E501
        :type: str
        """

        self._having = having

    @property
    def result_size(self):
        """Gets the result_size of this CohortComputationApiModel.  # noqa: E501


        :return: The result_size of this CohortComputationApiModel.  # noqa: E501
        :rtype: int
        """
        return self._result_size

    @result_size.setter
    def result_size(self, result_size):
        """Sets the result_size of this CohortComputationApiModel.


        :param result_size: The result_size of this CohortComputationApiModel.  # noqa: E501
        :type: int
        """

        self._result_size = result_size

    @property
    def results(self):
        """Gets the results of this CohortComputationApiModel.  # noqa: E501


        :return: The results of this CohortComputationApiModel.  # noqa: E501
        :rtype: list[DimensionFilterContributionApiModel]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this CohortComputationApiModel.


        :param results: The results of this CohortComputationApiModel.  # noqa: E501
        :type: list[DimensionFilterContributionApiModel]
        """

        self._results = results

    @property
    def enumeration_items(self):
        """Gets the enumeration_items of this CohortComputationApiModel.  # noqa: E501


        :return: The enumeration_items of this CohortComputationApiModel.  # noqa: E501
        :rtype: list[EnumerationItemApiModel]
        """
        return self._enumeration_items

    @enumeration_items.setter
    def enumeration_items(self, enumeration_items):
        """Sets the enumeration_items of this CohortComputationApiModel.


        :param enumeration_items: The enumeration_items of this CohortComputationApiModel.  # noqa: E501
        :type: list[EnumerationItemApiModel]
        """

        self._enumeration_items = enumeration_items

    @property
    def round_off_threshold(self):
        """Gets the round_off_threshold of this CohortComputationApiModel.  # noqa: E501


        :return: The round_off_threshold of this CohortComputationApiModel.  # noqa: E501
        :rtype: bool
        """
        return self._round_off_threshold

    @round_off_threshold.setter
    def round_off_threshold(self, round_off_threshold):
        """Sets the round_off_threshold of this CohortComputationApiModel.


        :param round_off_threshold: The round_off_threshold of this CohortComputationApiModel.  # noqa: E501
        :type: bool
        """

        self._round_off_threshold = round_off_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CohortComputationApiModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CohortComputationApiModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CohortComputationApiModel):
            return True

        return self.to_dict() != other.to_dict()
