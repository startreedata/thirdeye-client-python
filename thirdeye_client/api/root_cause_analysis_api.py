# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from thirdeye_client.api_client import ApiClient


class RootCauseAnalysisApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def count_with_predicate8(self, **kwargs):  # noqa: E501
        """count_with_predicate8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_with_predicate8(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.count_with_predicate8_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.count_with_predicate8_with_http_info(**kwargs)  # noqa: E501
            return data

    def count_with_predicate8_with_http_info(self, **kwargs):  # noqa: E501
        """count_with_predicate8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.count_with_predicate8_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_with_predicate8" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_multiple8(self, **kwargs):  # noqa: E501
        """create_multiple8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple8(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RcaInvestigationApi] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_multiple8_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_multiple8_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_multiple8_with_http_info(self, **kwargs):  # noqa: E501
        """create_multiple8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_multiple8_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RcaInvestigationApi] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_multiple8" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def data_cube_summary(self, **kwargs):  # noqa: E501
        """Retrieve the likely root causes behind an anomaly  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_cube_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id of the anomaly
        :param str baseline_offset: baseline offset identifier in ISO 8601 format(e.g. \"P1W\").
        :param list[str] filters: dimension filters (e.g. \"dim1=val1\", \"dim2!=val2\")
        :param int summary_size: Number of entries to put in the summary.
        :param int depth: Maximum number of dimensions to drill down by.
        :param bool one_side_error: If true, only returns changes that have the same direction as the global change.
        :param list[str] dimensions: List of dimensions to use for the analysis. If empty, all dimensions of the datasets are used.
        :param list[str] excluded_dimensions: List of dimensions to exclude from the analysis.
        :param str hierarchies: Hierarchy among some dimensions. The order will be respected in the result. An example of a hierarchical group is {continent, country}. Parameter format is [[\"continent\",\"country\"], [\"dim1\", \"dim2\", \"dim3\"]]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.data_cube_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.data_cube_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def data_cube_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve the likely root causes behind an anomaly  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.data_cube_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id of the anomaly
        :param str baseline_offset: baseline offset identifier in ISO 8601 format(e.g. \"P1W\").
        :param list[str] filters: dimension filters (e.g. \"dim1=val1\", \"dim2!=val2\")
        :param int summary_size: Number of entries to put in the summary.
        :param int depth: Maximum number of dimensions to drill down by.
        :param bool one_side_error: If true, only returns changes that have the same direction as the global change.
        :param list[str] dimensions: List of dimensions to use for the analysis. If empty, all dimensions of the datasets are used.
        :param list[str] excluded_dimensions: List of dimensions to exclude from the analysis.
        :param str hierarchies: Hierarchy among some dimensions. The order will be respected in the result. An example of a hierarchical group is {continent, country}. Parameter format is [[\"continent\",\"country\"], [\"dim1\", \"dim2\", \"dim3\"]]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'baseline_offset', 'filters', 'summary_size', 'depth', 'one_side_error', 'dimensions', 'excluded_dimensions', 'hierarchies']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method data_cube_summary" % key
                )
            params[key] = val
        del params['kwargs']

        if self.api_client.client_side_validation and ('summary_size' in params and params['summary_size'] < 1):  # noqa: E501
            raise ValueError("Invalid value for parameter `summary_size` when calling `data_cube_summary`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'baseline_offset' in params:
            query_params.append(('baselineOffset', params['baseline_offset']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
            collection_formats['filters'] = 'multi'  # noqa: E501
        if 'summary_size' in params:
            query_params.append(('summarySize', params['summary_size']))  # noqa: E501
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501
        if 'one_side_error' in params:
            query_params.append(('oneSideError', params['one_side_error']))  # noqa: E501
        if 'dimensions' in params:
            query_params.append(('dimensions', params['dimensions']))  # noqa: E501
            collection_formats['dimensions'] = 'multi'  # noqa: E501
        if 'excluded_dimensions' in params:
            query_params.append(('excludedDimensions', params['excluded_dimensions']))  # noqa: E501
            collection_formats['excludedDimensions'] = 'multi'  # noqa: E501
        if 'hierarchies' in params:
            query_params.append(('hierarchies', params['hierarchies']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/dim-analysis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete8(self, id, **kwargs):  # noqa: E501
        """delete8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete8(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete8_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete8_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete8_with_http_info(self, id, **kwargs):  # noqa: E501
        """delete8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete8_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete8" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete8`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_all8(self, **kwargs):  # noqa: E501
        """delete_all8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all8(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_all8_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_all8_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_all8_with_http_info(self, **kwargs):  # noqa: E501
        """delete_all8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_all8_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_all8" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations/all', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_multiple8(self, **kwargs):  # noqa: E501
        """edit_multiple8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_multiple8(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RcaInvestigationApi] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_multiple8_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.edit_multiple8_with_http_info(**kwargs)  # noqa: E501
            return data

    def edit_multiple8_with_http_info(self, **kwargs):  # noqa: E501
        """edit_multiple8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_multiple8_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[RcaInvestigationApi] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_multiple8" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_cohorts(self, **kwargs):  # noqa: E501
        """Builds cohorts based on threshold  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_cohorts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CohortComputationApi body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_cohorts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_cohorts_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_cohorts_with_http_info(self, **kwargs):  # noqa: E501
        """Builds cohorts based on threshold  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_cohorts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CohortComputationApi body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_cohorts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/metrics/cohorts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get17(self, name, **kwargs):  # noqa: E501
        """get17  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get17(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get17_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get17_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get17_with_http_info(self, name, **kwargs):  # noqa: E501
        """get17  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get17_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get17" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `get17`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations/name/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get18(self, id, **kwargs):  # noqa: E501
        """get18  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get18(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get18_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get18_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get18_with_http_info(self, id, **kwargs):  # noqa: E501
        """get18  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get18_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get18" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get18`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all8(self, **kwargs):  # noqa: E501
        """get_all8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all8(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all8_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all8_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all8_with_http_info(self, **kwargs):  # noqa: E501
        """get_all8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all8_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all8" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/investigations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_anomalies_events(self, anomaly_id, **kwargs):  # noqa: E501
        """Returns anomalies related to the anomaly. Anomalies are ordered by the scoring function.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomalies_events(anomaly_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int anomaly_id: id of the anomaly (required)
        :param str scoring: Scoring function
        :param int limit: Limit number of anomalies to return.
        :param str lookaround: Period, in ISO-8601 format, to look after and before the anomaly start.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_anomalies_events_with_http_info(anomaly_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_anomalies_events_with_http_info(anomaly_id, **kwargs)  # noqa: E501
            return data

    def get_anomalies_events_with_http_info(self, anomaly_id, **kwargs):  # noqa: E501
        """Returns anomalies related to the anomaly. Anomalies are ordered by the scoring function.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomalies_events_with_http_info(anomaly_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int anomaly_id: id of the anomaly (required)
        :param str scoring: Scoring function
        :param int limit: Limit number of anomalies to return.
        :param str lookaround: Period, in ISO-8601 format, to look after and before the anomaly start.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['anomaly_id', 'scoring', 'limit', 'lookaround']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anomalies_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'anomaly_id' is set
        if self.api_client.client_side_validation and ('anomaly_id' not in params or
                                                       params['anomaly_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `anomaly_id` when calling `get_anomalies_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'anomaly_id' in params:
            query_params.append(('anomalyId', params['anomaly_id']))  # noqa: E501
        if 'scoring' in params:
            query_params.append(('scoring', params['scoring']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'lookaround' in params:
            query_params.append(('lookaround', params['lookaround']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/related/anomalies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_anomaly_heatmap(self, **kwargs):  # noqa: E501
        """Returns heatmap for the specified anomaly.  Aligns time stamps if necessary and omits null values.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomaly_heatmap(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id of the anomaly
        :param str baseline_offset: baseline offset identifier in ISO 8601 format(e.g. \"P1W\").
        :param list[str] filters: dimension filters (e.g. \"dim1=val1\", \"dim2!=val2\")
        :param list[str] dimensions: List of dimensions to use for the analysis. If empty, all dimensions of the datasets are used.
        :param list[str] excluded_dimensions: List of dimensions to exclude from the analysis.
        :param int limit: limit results to the top k elements, plus 'OTHER' rollup element
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_anomaly_heatmap_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_anomaly_heatmap_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_anomaly_heatmap_with_http_info(self, **kwargs):  # noqa: E501
        """Returns heatmap for the specified anomaly.  Aligns time stamps if necessary and omits null values.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_anomaly_heatmap_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: id of the anomaly
        :param str baseline_offset: baseline offset identifier in ISO 8601 format(e.g. \"P1W\").
        :param list[str] filters: dimension filters (e.g. \"dim1=val1\", \"dim2!=val2\")
        :param list[str] dimensions: List of dimensions to use for the analysis. If empty, all dimensions of the datasets are used.
        :param list[str] excluded_dimensions: List of dimensions to exclude from the analysis.
        :param int limit: limit results to the top k elements, plus 'OTHER' rollup element
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'baseline_offset', 'filters', 'dimensions', 'excluded_dimensions', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anomaly_heatmap" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'baseline_offset' in params:
            query_params.append(('baselineOffset', params['baseline_offset']))  # noqa: E501
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
            collection_formats['filters'] = 'multi'  # noqa: E501
        if 'dimensions' in params:
            query_params.append(('dimensions', params['dimensions']))  # noqa: E501
            collection_formats['dimensions'] = 'multi'  # noqa: E501
        if 'excluded_dimensions' in params:
            query_params.append(('excludedDimensions', params['excluded_dimensions']))  # noqa: E501
            collection_formats['excludedDimensions'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/metrics/heatmap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_calendar_events(self, anomaly_id, **kwargs):  # noqa: E501
        """Returns calendar events related to the anomaly. Events are ordered by the scoring function.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calendar_events(anomaly_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int anomaly_id: id of the anomaly (required)
        :param str type: Type of event.
        :param str scoring: Scoring function
        :param int limit: Limit number of anomalies to return.
        :param str lookaround: Period, in ISO-8601 format, to look after and before the anomaly start.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_calendar_events_with_http_info(anomaly_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_calendar_events_with_http_info(anomaly_id, **kwargs)  # noqa: E501
            return data

    def get_calendar_events_with_http_info(self, anomaly_id, **kwargs):  # noqa: E501
        """Returns calendar events related to the anomaly. Events are ordered by the scoring function.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_calendar_events_with_http_info(anomaly_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int anomaly_id: id of the anomaly (required)
        :param str type: Type of event.
        :param str scoring: Scoring function
        :param int limit: Limit number of anomalies to return.
        :param str lookaround: Period, in ISO-8601 format, to look after and before the anomaly start.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['anomaly_id', 'type', 'scoring', 'limit', 'lookaround']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_calendar_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'anomaly_id' is set
        if self.api_client.client_side_validation and ('anomaly_id' not in params or
                                                       params['anomaly_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `anomaly_id` when calling `get_calendar_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'anomaly_id' in params:
            query_params.append(('anomalyId', params['anomaly_id']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'scoring' in params:
            query_params.append(('scoring', params['scoring']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'lookaround' in params:
            query_params.append(('lookaround', params['lookaround']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth']  # noqa: E501

        return self.api_client.call_api(
            '/api/rca/related/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
